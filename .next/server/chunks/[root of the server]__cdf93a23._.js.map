{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/muhammedshibilin/nextjs/harfa/lib/paseto.ts"],"sourcesContent":["// lib/paseto.ts\n'paseto-ts/v4'\nconst privateKey = (() => {\n  const key = process.env.PASETO_PRIVATE_KEY;\n  if (!key) throw new Error('PASETO_PRIVATE_KEY is missing from environment variables');\n  console.log(key,key.length)\n  const buffer = Buffer.from(key, 'base64');\n  if (buffer.length !== 64) {\n    console.error(`Private key length is ${buffer.length}, expected 64 bytes`);\n    throw new Error('Invalid PASETO_PRIVATE_KEY length');\n  }\n  return buffer;\n})();\n\nconst publicKey = (() => {\n  const key = process.env.PASETO_PUBLIC_KEY;\n  if (!key) throw new Error('PASETO_PUBLIC_KEY is missing from environment variables');\n  const buffer = Buffer.from(key, 'base64');\n  if (buffer.length !== 32) {\n    console.error(`Public key length is ${buffer.length}, expected 32 bytes`);\n    throw new Error('Invalid PASETO_PUBLIC_KEY length');\n  }\n  return buffer;\n})();\n\ninterface TokenPayload {\n  role: string;\n  username: string;\n}\n\n\nexport async function generateToken(payload: TokenPayload): Promise<string> {\n  try {\n    const payloadObject: Record<string, unknown> = { ...payload };\n    return await V4.sign(payloadObject, privateKey, {\n      expiresIn: '1h',\n      audience: 'your-app',\n      issuer: 'your-backend',\n      subject: payload.username,\n    });\n  } catch (error) {\n    console.error('Failed to generate PASETO token:', error);\n    throw new Error('Token generation failed');\n  }\n}\n\nexport async function verifyToken(token: string): Promise<TokenPayload | null> {\n  try {\n    const { payload } = await V4.verify(token, publicKey, {\n      audience: 'your-app',\n      issuer: 'your-backend',\n    });\n    return payload as TokenPayload;\n  } catch (error) {\n    console.warn('Failed to verify PASETO token:', error);\n    return null;\n  }\n}"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;AACA,MAAM,aAAa,CAAC;IAClB,MAAM,MAAM,QAAQ,GAAG,CAAC,kBAAkB;IAC1C,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;IAC1B,QAAQ,GAAG,CAAC,KAAI,IAAI,MAAM;IAC1B,MAAM,SAAS,OAAO,IAAI,CAAC,KAAK;IAChC,IAAI,OAAO,MAAM,KAAK,IAAI;QACxB,QAAQ,KAAK,CAAC,CAAC,sBAAsB,EAAE,OAAO,MAAM,CAAC,mBAAmB,CAAC;QACzE,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT,CAAC;AAED,MAAM,YAAY,CAAC;IACjB,MAAM,MAAM,QAAQ,GAAG,CAAC,iBAAiB;IACzC,IAAI,CAAC,KAAK,MAAM,IAAI,MAAM;IAC1B,MAAM,SAAS,OAAO,IAAI,CAAC,KAAK;IAChC,IAAI,OAAO,MAAM,KAAK,IAAI;QACxB,QAAQ,KAAK,CAAC,CAAC,qBAAqB,EAAE,OAAO,MAAM,CAAC,mBAAmB,CAAC;QACxE,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT,CAAC;AAQM,eAAe,cAAc,OAAqB;IACvD,IAAI;QACF,MAAM,gBAAyC;YAAE,GAAG,OAAO;QAAC;QAC5D,OAAO,MAAM,GAAG,IAAI,CAAC,eAAe,YAAY;YAC9C,WAAW;YACX,UAAU;YACV,QAAQ;YACR,SAAS,QAAQ,QAAQ;QAC3B;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe,YAAY,KAAa;IAC7C,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,GAAG,MAAM,CAAC,OAAO,WAAW;YACpD,UAAU;YACV,QAAQ;QACV;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,IAAI,CAAC,kCAAkC;QAC/C,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///home/muhammedshibilin/nextjs/harfa/app/backend/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { generateToken } from '@/lib/paseto';\n\nexport async function POST(req: NextRequest) {\n  const { username, password } = await req.json();\n  const adminUsername = process.env.ADMIN_USERNAME;\n  const adminPassword = process.env.ADMIN_PASSWORD;\n\n  if (username !== adminUsername || password !== adminPassword) {\n    return NextResponse.json({ message: 'Invalid credentials' }, { status: 401 });\n  }\n\n  try {\n    const token = await generateToken({ role: 'admin', username });\n    return NextResponse.json({ token });\n  } catch (error) {\n    console.error('Failed to create token:', error);\n    return NextResponse.json({ message: 'Token creation failed' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe,KAAK,GAAgB;IACzC,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAC7C,MAAM,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAChD,MAAM,gBAAgB,QAAQ,GAAG,CAAC,cAAc;IAEhD,IAAI,aAAa,iBAAiB,aAAa,eAAe;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAsB,GAAG;YAAE,QAAQ;QAAI;IAC7E;IAEA,IAAI;QACF,MAAM,QAAQ,MAAM,CAAA,GAAA,+GAAA,CAAA,gBAAa,AAAD,EAAE;YAAE,MAAM;YAAS;QAAS;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAM;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}